/*
 * guiGuiBase.cpp
 *
 *  Created on: 4.7.2012
 *      Author: kubanec
 */

#include "ch.h"
#include "guiCommon.h"
namespace GuiFramework
{

gui_GuiBase::gui_GuiBase()
{
	ScreenCount = 0;
	ScreenIndex = 0;
	ScreenField = 0;
	low_level_button_init();
}

gui_GuiBase::~gui_GuiBase()
{

}

void gui_GuiBase::print_gui(void)
{
	gui_Screen * temp = GetFromIndex<gui_Screen>(ScreenField, ScreenIndex,
			ScreenCount);
	temp->printScreen();
}

uint16_t gui_GuiBase::GetSize()
{
	uint16_t size = sizeof(gui_GuiBase);
	gui_Screen * temp = ScreenField;

	do
	{
		size += temp->GetSize();
		temp = temp->GetNext();
	} while (temp != NULL);

	return size;
}

gui_Screen * gui_GuiBase::MakeScreenHeap()
{
	gui_Screen * temp = new gui_Screen(this, ScreenIndex);
	return RegisterScreen(temp);
}

bool gui_GuiBase::ButtonScan()
{
	volatile gui_Item::Buttons input =
			(gui_Item::Buttons) low_level_input_buttons();
	gui_Item * item = ScreenField[ScreenIndex].GetActiveItem();

	if (input != gui_Item::BUTTON_DOWN && input != gui_Item::BUTTON_UP
			&& input != gui_Item::BUTTON_ENTER)
		return false;

	if (item->GetClicked())
		item->Event(input, gui_Item::CLICKED);
	else
		item->Event(input, gui_Item::NOTCLICKED);

	return true;
}
}
